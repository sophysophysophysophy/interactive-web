* 자바스크립트 
- 변수 
    var, let, const 
    : 유효범위의 차이 (let, const : {} (블록단위)의 유효범위, var : 함수 단위. )
    but 함수 안에서  함수 밖 변수에 접근 가능.. 

- DOM SCRIPT ( Document Object Model)
HTML ELEMENT 하나 하나를 Object로 봄. => 이 하나하나의 Object는 javascript로 제어 가능
모든 ELEMENT를 객체로 바라보는 모델 : DOM
html 요소 중 하나를 가져오는 메소드 => document.querySelector('.a') : a라는 이름의 클래스를 이용하여 가져옴
querySelector : 가장 먼저 위치하는 하나의 요소만 선택됨. 
querySelectorAll : 모든 같은 이름의 클래스 가진 요소 가져옴 => Nodelist로 리턴이 됨. 
document.querySelector('.ilbuni:nth-child(2)') : css 선택자를 메소드 안에서 사용하여 접근 가능!!!
                        => ilbuni class 갖는 요소 중 두번째 child 선택하겠다

html ELEMENT의 어떤 속성을 넣거나 가져오는 방법 

- data란?
data-로 시작한느 표준 커스텀 속성. data-index, data-id, data-role 등 
data-의 형식으로 시작하면 어떤 속성이든 필요에 따라 임의로 추가 가능.


ex)
<div class="characters"></div>

const char = document.querySelector('.characters')
char.setAttribute('data-id', 123) : data-id라는 속성이 만들어지고 거기에 123이 들어감

결과)
<div class="characters" data-id="123"></div>


- 값을 얻어오기 ?
char.getAttribute('data-id')
결과 => "123"


* ELEMENT들을 제거했다가, 새로 만들었다가 하는 방법
const pElem = document.createElement('p')
pElem => <p></p>

// 이 element 안에 속성 들어감
pElem.innerHTML = '<a href="#">안녕</a>???'

pElem => 
            <p>
                <a href='#'>안녕</a>
                "???"
            </p>

const charactersElem = document.querySelector('.characters')

charactersElem.appendChild(pElem)
                => appendChild : child를 붙이는 것 
                    이것을 실행한 주체 객체의 막내 자식으로 붙이는 것

child 제거 : removeChild 
charactersElem.removeChild(document.querySelector('.b'))


------------------------------------------------------
<자바스크립트 이벤트> 
클릭, 데이터 로드 완료, 이미지 로드 완료, 브라우저 크기 변경 등이 이벤트 

const ilbuni = document.querySelector('.ilbuni:nth-child(3)')
ilbuni.addEventListener(함수 적용할 이벤트, 이 이벤트가 발생할 때의 함수, (옵션 : 대부분 생략) )                 //익명함수

ex)
ilbuni.addEventListener('click', function() {
    ilbuni.classList.add('special')
})

